// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(renamed_and_removed_lints)]
#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports, clippy::wildcard_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("hid_modify_bpf")
            .map("remap_map", false)
            .map("event_rb", false)
            .map("hid_modi.bss", true)
            .map("hid_modify_ops", false)
            .prog("modify_hid_event");
        builder.build()
    }
    pub struct OpenHidModifyMaps<'obj> {
        pub remap_map: libbpf_rs::OpenMapMut<'obj>,
        pub event_rb: libbpf_rs::OpenMapMut<'obj>,
        pub bss: libbpf_rs::OpenMapMut<'obj>,
        pub bss_data: Option<&'obj mut types::bss>,
        pub hid_modify_ops: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenHidModifyMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut remap_map = None;
            let mut event_rb = None;
            let mut bss = None;
            let mut hid_modify_ops = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "remap_map" => remap_map = Some(map),
                    "event_rb" => event_rb = Some(map),
                    "hid_modi.bss" => bss = Some(map),
                    "hid_modify_ops" => hid_modify_ops = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                remap_map: remap_map.expect("map `remap_map` not present"),
                event_rb: event_rb.expect("map `event_rb` not present"),
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(2)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                },
                hid_modify_ops: hid_modify_ops.expect("map `hid_modify_ops` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct HidModifyMaps<'obj> {
        pub remap_map: libbpf_rs::MapMut<'obj>,
        pub event_rb: libbpf_rs::MapMut<'obj>,
        pub bss: libbpf_rs::MapMut<'obj>,
        pub bss_data: Option<&'obj mut types::bss>,
        pub hid_modify_ops: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> HidModifyMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut remap_map = None;
            let mut event_rb = None;
            let mut bss = None;
            let mut hid_modify_ops = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "remap_map" => remap_map = Some(map),
                    "event_rb" => event_rb = Some(map),
                    "hid_modi.bss" => bss = Some(map),
                    "hid_modify_ops" => hid_modify_ops = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                remap_map: remap_map.expect("map `remap_map` not present"),
                event_rb: event_rb.expect("map `event_rb` not present"),
                bss: bss.expect("map `bss` not present"),
                bss_data: unsafe {
                    config
                        .map_mmap_ptr(2)
                        .expect("BPF map `bss` does not have mmap pointer")
                        .cast::<types::bss>()
                        .as_mut()
                },
                hid_modify_ops: hid_modify_ops.expect("map `hid_modify_ops` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenHidModifyProgs<'obj> {
        pub modify_hid_event: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenHidModifyProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut modify_hid_event = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "modify_hid_event" => modify_hid_event = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                modify_hid_event: modify_hid_event.expect("prog `modify_hid_event` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct HidModifyProgs<'obj> {
        pub modify_hid_event: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> HidModifyProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenHidModifyProgs<'obj>) -> Self {
            Self {
                modify_hid_event: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.modify_hid_event.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct HidModifySkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> HidModifySkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenHidModifySkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenHidModifySkel {
                maps: unsafe { OpenHidModifyMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenHidModifyProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };
            skel.struct_ops.hid_modify_ops = skel
                .maps
                .hid_modify_ops
                .initial_value_mut()
                .unwrap()
                .as_mut_ptr()
                .cast();

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for HidModifySkelBuilder {
        type Output = OpenHidModifySkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenHidModifySkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenHidModifySkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {
        pub hid_modify_ops: *mut types::hid_bpf_ops,
    }

    impl StructOps {
        pub fn hid_modify_ops(&self) -> &types::hid_bpf_ops {
            // SAFETY: The library ensures that the member is pointing to
            //         valid data.
            unsafe { self.hid_modify_ops.as_ref() }.unwrap()
        }

        pub fn hid_modify_ops_mut(&mut self) -> &mut types::hid_bpf_ops {
            // SAFETY: The library ensures that the member is pointing to
            //         valid data.
            unsafe { self.hid_modify_ops.as_mut() }.unwrap()
        }
    }
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct hid_bpf_ops {
            pub hid_id: i32,
            pub flags: u32,
            pub list: list_head,
            pub hid_device_event: *mut libbpf_rs::libbpf_sys::bpf_program,
            pub hid_rdesc_fixup: *mut libbpf_rs::libbpf_sys::bpf_program,
            pub hid_hw_request: *mut libbpf_rs::libbpf_sys::bpf_program,
            pub hid_hw_output_report: *mut libbpf_rs::libbpf_sys::bpf_program,
            pub hdev: *mut std::ffi::c_void,
        }
        impl Default for hid_bpf_ops {
            fn default() -> Self {
                Self {
                    hid_id: i32::default(),
                    flags: u32::default(),
                    list: list_head::default(),
                    hid_device_event: std::ptr::null_mut(),
                    hid_rdesc_fixup: std::ptr::null_mut(),
                    hid_hw_request: std::ptr::null_mut(),
                    hid_hw_output_report: std::ptr::null_mut(),
                    hdev: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct list_head {
            pub next: *mut list_head,
            pub prev: *mut list_head,
        }
        impl Default for list_head {
            fn default() -> Self {
                Self {
                    next: std::ptr::null_mut(),
                    prev: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 1],
            pub key: *mut u32,
            pub value: *mut u32,
            pub max_entries: *mut [i32; 32],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_2 {
            pub r#type: *mut [i32; 27],
            pub max_entries: *mut [i32; 4096],
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct hid_bpf_ctx {
            pub hid: *mut std::ffi::c_void,
            pub allocated_size: u32,
            pub __anon_hid_bpf_ctx_1: __anon_hid_bpf_ctx_1,
        }
        impl Default for hid_bpf_ctx {
            fn default() -> Self {
                Self {
                    hid: std::ptr::null_mut(),
                    allocated_size: u32::default(),
                    __anon_hid_bpf_ctx_1: __anon_hid_bpf_ctx_1::default(),
                }
            }
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_hid_bpf_ctx_1 {
            pub retval: i32,
            pub size: i32,
        }
        impl std::fmt::Debug for __anon_hid_bpf_ctx_1 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_hid_bpf_ctx_1 {
            fn default() -> Self {
                Self {
                    retval: i32::default(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct event_log_entry {
            pub original: i32,
            pub remapped: i32,
            pub new: i32,
        }
        #[derive(Debug, Copy, Clone, Eq, PartialEq)]
        #[repr(transparent)]
        pub struct hid_report_type(pub u32);
        #[allow(non_upper_case_globals)]
        impl hid_report_type {
            pub const HID_INPUT_REPORT: hid_report_type = hid_report_type(0);
            pub const HID_OUTPUT_REPORT: hid_report_type = hid_report_type(1);
            pub const HID_FEATURE_REPORT: hid_report_type = hid_report_type(2);
            pub const HID_REPORT_TYPES: hid_report_type = hid_report_type(3);
        }
        impl Default for hid_report_type {
            fn default() -> Self {
                hid_report_type::HID_INPUT_REPORT
            }
        }
        #[derive(Debug, Copy, Clone, Eq, PartialEq)]
        #[repr(transparent)]
        pub struct hid_class_request(pub u32);
        #[allow(non_upper_case_globals)]
        impl hid_class_request {
            pub const HID_REQ_GET_REPORT: hid_class_request = hid_class_request(1);
            pub const HID_REQ_GET_IDLE: hid_class_request = hid_class_request(2);
            pub const HID_REQ_GET_PROTOCOL: hid_class_request = hid_class_request(3);
            pub const HID_REQ_SET_REPORT: hid_class_request = hid_class_request(9);
            pub const HID_REQ_SET_IDLE: hid_class_request = hid_class_request(10);
            pub const HID_REQ_SET_PROTOCOL: hid_class_request = hid_class_request(11);
        }
        impl Default for hid_class_request {
            fn default() -> Self {
                hid_class_request::HID_REQ_GET_REPORT
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct bss {
            pub _dummy: event_log_entry,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct struct_ops_link {
            pub hid_modify_ops: hid_bpf_ops,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub _license: [i8; 4],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub remap_map: __anon_1,
            pub event_rb: __anon_2,
        }
    }
    pub struct OpenHidModifySkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenHidModifyMaps<'obj>,
        pub progs: OpenHidModifyProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenHidModifySkel<'obj> {
        type Output = HidModifySkel<'obj>;
        fn load(self) -> libbpf_rs::Result<HidModifySkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(HidModifySkel {
                maps: unsafe { HidModifyMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: HidModifyProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: HidModifyLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct HidModifyLinks {
        pub modify_hid_event: Option<libbpf_rs::Link>,
    }
    pub struct HidModifySkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: HidModifyMaps<'obj>,
        pub progs: HidModifyProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: HidModifyLinks,
    }

    unsafe impl Send for HidModifySkel<'_> {}
    unsafe impl Sync for HidModifySkel<'_> {}

    impl<'obj> Skel<'obj> for HidModifySkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = HidModifyLinks {
                modify_hid_event: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl HidModifySkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 12, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 115, 116, 114, 117, 99, 116, 95, 111, 112, 115, 47, 104, 105, 100, 95, 98, 112, 102,
        95, 100, 101, 118, 105, 99, 101, 95, 101, 118, 101, 110, 116, 0, 46, 98, 115, 115, 0, 46,
        115, 116, 114, 117, 99, 116, 95, 111, 112, 115, 46, 108, 105, 110, 107, 0, 108, 105, 99,
        101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 104, 105, 100, 95, 109, 111, 100, 105,
        102, 121, 46, 98, 112, 102, 46, 99, 0, 109, 111, 100, 105, 102, 121, 95, 104, 105, 100, 95,
        101, 118, 101, 110, 116, 0, 104, 105, 100, 95, 98, 112, 102, 95, 103, 101, 116, 95, 100,
        97, 116, 97, 0, 114, 101, 109, 97, 112, 95, 109, 97, 112, 0, 101, 118, 101, 110, 116, 95,
        114, 98, 0, 95, 100, 117, 109, 109, 121, 0, 104, 105, 100, 95, 109, 111, 100, 105, 102,
        121, 95, 111, 112, 115, 0, 95, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 101, 108, 115,
        116, 114, 117, 99, 116, 95, 111, 112, 115, 47, 104, 105, 100, 95, 98, 112, 102, 95, 100,
        101, 118, 105, 99, 101, 95, 101, 118, 101, 110, 116, 0, 46, 114, 101, 108, 46, 115, 116,
        114, 117, 99, 116, 95, 111, 112, 115, 46, 108, 105, 110, 107, 0, 46, 66, 84, 70, 0, 46, 66,
        84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        102, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0,
        32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 17, 0, 7, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 17, 0, 7, 0, 32, 0, 0, 0, 0, 0,
        0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0,
        0, 0, 0, 0, 0, 162, 0, 0, 0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
        177, 0, 0, 0, 17, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 121, 17, 0, 0,
        0, 0, 0, 0, 180, 2, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 6, 0, 0, 0, 133, 16, 0, 0, 255, 255,
        255, 255, 21, 0, 27, 0, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 0, 0, 86, 1, 25, 0, 90, 0, 0, 0,
        113, 1, 1, 0, 0, 0, 0, 0, 22, 1, 23, 0, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 180, 2, 0, 0,
        0, 0, 0, 0, 99, 42, 252, 255, 0, 0, 0, 0, 99, 42, 248, 255, 0, 0, 0, 0, 99, 26, 244, 255,
        0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 191,
        2, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 21, 0, 5, 0, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0,
        0, 0, 180, 2, 0, 0, 1, 0, 0, 0, 99, 42, 248, 255, 0, 0, 0, 0, 99, 26, 252, 255, 0, 0, 0, 0,
        115, 22, 0, 0, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 244, 255, 255, 255, 24,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 3, 0, 0, 12, 0, 0, 0, 183, 4, 0, 0, 0, 0,
        0, 0, 133, 0, 0, 0, 130, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24,
        0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0,
        0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
        0, 3, 0, 0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 156, 5, 0, 0, 156, 5, 0, 0, 76, 5,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0,
        0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 8,
        7, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0,
        0, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 48, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 53, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 57, 0, 0, 0, 5, 0, 0, 0, 128, 0, 0, 0,
        63, 0, 0, 0, 9, 0, 0, 0, 192, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 14, 11, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0,
        0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0,
        2, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 48, 0, 0, 0, 13,
        0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 15, 0, 0, 0, 64, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 14, 17,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 20, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0,
        0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 113, 0, 0, 0, 19, 0, 0, 0, 117, 0, 0,
        0, 1, 0, 0, 12, 21, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 13, 24, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0,
        0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 25, 0, 0, 0, 134,
        0, 0, 0, 0, 0, 0, 8, 26, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 2, 28, 0, 0, 0, 153, 0, 0, 0, 3, 0, 0, 4, 16, 0, 0, 0, 165, 0, 0, 0, 29, 0,
        0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 7, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 96, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 2, 59, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 4, 0, 0, 0, 184, 0, 0, 0,
        31, 0, 0, 0, 0, 0, 0, 0, 191, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 8,
        2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 33, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 8, 34, 0, 0, 0,
        209, 0, 0, 0, 0, 0, 0, 8, 35, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 8, 36, 0, 0, 0, 242, 0, 0, 0,
        0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 12, 23, 0, 0, 0, 17, 1, 0, 0, 3,
        0, 0, 4, 12, 0, 0, 0, 33, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 42, 1, 0, 0, 2, 0, 0, 0, 32, 0,
        0, 0, 51, 1, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 55, 1, 0, 0, 0, 0, 0, 14, 38, 0, 0, 0, 1, 0, 0,
        0, 62, 1, 0, 0, 8, 0, 0, 4, 64, 0, 0, 0, 74, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 81, 1, 0, 0,
        6, 0, 0, 0, 32, 0, 0, 0, 87, 1, 0, 0, 41, 0, 0, 0, 64, 0, 0, 0, 92, 1, 0, 0, 43, 0, 0, 0,
        192, 0, 0, 0, 109, 1, 0, 0, 48, 0, 0, 0, 0, 1, 0, 0, 125, 1, 0, 0, 50, 0, 0, 0, 64, 1, 0,
        0, 140, 1, 0, 0, 53, 0, 0, 0, 128, 1, 0, 0, 161, 1, 0, 0, 29, 0, 0, 0, 192, 1, 0, 0, 166,
        1, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 176, 1, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 181, 1, 0, 0, 42,
        0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 44, 0,
        0, 0, 0, 0, 0, 0, 3, 0, 0, 13, 2, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
        0, 0, 0, 0, 0, 46, 0, 0, 0, 186, 1, 0, 0, 4, 0, 0, 6, 4, 0, 0, 0, 202, 1, 0, 0, 0, 0, 0, 0,
        219, 1, 0, 0, 1, 0, 0, 0, 237, 1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 17, 2, 0, 0, 0,
        0, 0, 8, 47, 0, 0, 0, 21, 2, 0, 0, 0, 0, 0, 8, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 49, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
        51, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 13, 2, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 26,
        0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 52, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 27, 2,
        0, 0, 6, 0, 0, 6, 4, 0, 0, 0, 45, 2, 0, 0, 1, 0, 0, 0, 64, 2, 0, 0, 2, 0, 0, 0, 81, 2, 0,
        0, 3, 0, 0, 0, 102, 2, 0, 0, 9, 0, 0, 0, 121, 2, 0, 0, 10, 0, 0, 0, 138, 2, 0, 0, 11, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 2, 54, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 13, 2, 0, 0, 0, 0, 0, 0, 0,
        27, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 159, 2, 0, 0, 0, 0, 0, 14, 40, 0, 0, 0, 1, 0, 0, 0,
        174, 2, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 56,
        0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 179, 2, 0, 0, 0, 0, 0, 14, 57, 0, 0, 0, 1, 0, 0, 0, 188,
        2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 1, 5, 0, 0, 1, 0, 0, 15, 12, 0, 0, 0, 39, 0, 0, 0, 0, 0,
        0, 0, 12, 0, 0, 0, 6, 5, 0, 0, 1, 0, 0, 15, 64, 0, 0, 0, 55, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
        0, 23, 5, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 31, 5, 0, 0,
        2, 0, 0, 15, 48, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 18, 0, 0, 0, 32, 0, 0, 0,
        16, 0, 0, 0, 37, 5, 0, 0, 1, 0, 0, 15, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95,
        95, 0, 117, 51, 50, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32,
        105, 110, 116, 0, 116, 121, 112, 101, 0, 107, 101, 121, 0, 118, 97, 108, 117, 101, 0, 109,
        97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 114, 101, 109, 97, 112, 95, 109, 97,
        112, 0, 101, 118, 101, 110, 116, 95, 114, 98, 0, 117, 110, 115, 105, 103, 110, 101, 100,
        32, 108, 111, 110, 103, 32, 108, 111, 110, 103, 0, 99, 116, 120, 0, 109, 111, 100, 105,
        102, 121, 95, 104, 105, 100, 95, 101, 118, 101, 110, 116, 0, 95, 95, 117, 56, 0, 117, 110,
        115, 105, 103, 110, 101, 100, 32, 99, 104, 97, 114, 0, 104, 105, 100, 95, 98, 112, 102, 95,
        99, 116, 120, 0, 104, 105, 100, 0, 97, 108, 108, 111, 99, 97, 116, 101, 100, 95, 115, 105,
        122, 101, 0, 114, 101, 116, 118, 97, 108, 0, 115, 105, 122, 101, 0, 95, 95, 115, 51, 50, 0,
        115, 105, 122, 101, 95, 116, 0, 95, 95, 107, 101, 114, 110, 101, 108, 95, 115, 105, 122,
        101, 95, 116, 0, 95, 95, 107, 101, 114, 110, 101, 108, 95, 117, 108, 111, 110, 103, 95,
        116, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 0, 104, 105, 100,
        95, 98, 112, 102, 95, 103, 101, 116, 95, 100, 97, 116, 97, 0, 101, 118, 101, 110, 116, 95,
        108, 111, 103, 95, 101, 110, 116, 114, 121, 0, 111, 114, 105, 103, 105, 110, 97, 108, 0,
        114, 101, 109, 97, 112, 112, 101, 100, 0, 110, 101, 119, 0, 95, 100, 117, 109, 109, 121, 0,
        104, 105, 100, 95, 98, 112, 102, 95, 111, 112, 115, 0, 104, 105, 100, 95, 105, 100, 0, 102,
        108, 97, 103, 115, 0, 108, 105, 115, 116, 0, 104, 105, 100, 95, 100, 101, 118, 105, 99,
        101, 95, 101, 118, 101, 110, 116, 0, 104, 105, 100, 95, 114, 100, 101, 115, 99, 95, 102,
        105, 120, 117, 112, 0, 104, 105, 100, 95, 104, 119, 95, 114, 101, 113, 117, 101, 115, 116,
        0, 104, 105, 100, 95, 104, 119, 95, 111, 117, 116, 112, 117, 116, 95, 114, 101, 112, 111,
        114, 116, 0, 104, 100, 101, 118, 0, 108, 105, 115, 116, 95, 104, 101, 97, 100, 0, 110, 101,
        120, 116, 0, 112, 114, 101, 118, 0, 104, 105, 100, 95, 114, 101, 112, 111, 114, 116, 95,
        116, 121, 112, 101, 0, 72, 73, 68, 95, 73, 78, 80, 85, 84, 95, 82, 69, 80, 79, 82, 84, 0,
        72, 73, 68, 95, 79, 85, 84, 80, 85, 84, 95, 82, 69, 80, 79, 82, 84, 0, 72, 73, 68, 95, 70,
        69, 65, 84, 85, 82, 69, 95, 82, 69, 80, 79, 82, 84, 0, 72, 73, 68, 95, 82, 69, 80, 79, 82,
        84, 95, 84, 89, 80, 69, 83, 0, 117, 54, 52, 0, 95, 95, 117, 54, 52, 0, 104, 105, 100, 95,
        99, 108, 97, 115, 115, 95, 114, 101, 113, 117, 101, 115, 116, 0, 72, 73, 68, 95, 82, 69,
        81, 95, 71, 69, 84, 95, 82, 69, 80, 79, 82, 84, 0, 72, 73, 68, 95, 82, 69, 81, 95, 71, 69,
        84, 95, 73, 68, 76, 69, 0, 72, 73, 68, 95, 82, 69, 81, 95, 71, 69, 84, 95, 80, 82, 79, 84,
        79, 67, 79, 76, 0, 72, 73, 68, 95, 82, 69, 81, 95, 83, 69, 84, 95, 82, 69, 80, 79, 82, 84,
        0, 72, 73, 68, 95, 82, 69, 81, 95, 83, 69, 84, 95, 73, 68, 76, 69, 0, 72, 73, 68, 95, 82,
        69, 81, 95, 83, 69, 84, 95, 80, 82, 79, 84, 79, 67, 79, 76, 0, 104, 105, 100, 95, 109, 111,
        100, 105, 102, 121, 95, 111, 112, 115, 0, 99, 104, 97, 114, 0, 95, 108, 105, 99, 101, 110,
        115, 101, 0, 104, 105, 100, 95, 100, 101, 118, 105, 99, 101, 0, 47, 104, 111, 109, 101, 47,
        97, 109, 105, 116, 99, 104, 97, 117, 100, 104, 97, 114, 105, 47, 82, 117, 115, 116, 114,
        111, 118, 101, 114, 80, 114, 111, 106, 101, 99, 116, 115, 47, 97, 115, 117, 115, 45, 112,
        120, 45, 107, 101, 121, 98, 111, 97, 114, 100, 45, 116, 111, 111, 108, 47, 115, 114, 99,
        47, 98, 112, 102, 47, 104, 105, 100, 95, 109, 111, 100, 105, 102, 121, 46, 98, 112, 102,
        46, 99, 0, 105, 110, 116, 32, 66, 80, 70, 95, 80, 82, 79, 71, 40, 109, 111, 100, 105, 102,
        121, 95, 104, 105, 100, 95, 101, 118, 101, 110, 116, 44, 32, 115, 116, 114, 117, 99, 116,
        32, 104, 105, 100, 95, 98, 112, 102, 95, 99, 116, 120, 32, 42, 104, 105, 100, 95, 99, 116,
        120, 41, 0, 32, 32, 32, 32, 95, 95, 117, 56, 42, 32, 100, 97, 116, 97, 32, 61, 32, 104,
        105, 100, 95, 98, 112, 102, 95, 103, 101, 116, 95, 100, 97, 116, 97, 40, 104, 105, 100, 95,
        99, 116, 120, 44, 32, 48, 44, 32, 54, 41, 59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 33, 100,
        97, 116, 97, 41, 0, 32, 32, 32, 32, 105, 102, 32, 40, 100, 97, 116, 97, 91, 48, 93, 32, 33,
        61, 32, 48, 120, 53, 97, 41, 0, 32, 32, 32, 32, 105, 102, 32, 40, 100, 97, 116, 97, 91, 49,
        93, 32, 61, 61, 32, 48, 41, 0, 32, 32, 32, 32, 115, 116, 114, 117, 99, 116, 32, 101, 118,
        101, 110, 116, 95, 108, 111, 103, 95, 101, 110, 116, 114, 121, 32, 101, 110, 116, 114, 121,
        32, 61, 32, 123, 0, 32, 32, 32, 32, 118, 97, 108, 117, 101, 32, 61, 32, 98, 112, 102, 95,
        109, 97, 112, 95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38, 114, 101,
        109, 97, 112, 95, 109, 97, 112, 44, 32, 38, 100, 97, 116, 97, 91, 49, 93, 41, 59, 0, 32,
        32, 32, 32, 105, 102, 32, 40, 118, 97, 108, 117, 101, 41, 0, 32, 32, 32, 32, 32, 32, 32,
        32, 101, 110, 116, 114, 121, 46, 110, 101, 119, 32, 61, 32, 42, 118, 97, 108, 117, 101, 59,
        0, 32, 32, 32, 32, 32, 32, 32, 32, 101, 110, 116, 114, 121, 46, 114, 101, 109, 97, 112,
        112, 101, 100, 32, 61, 32, 49, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 100, 97, 116, 97, 91,
        49, 93, 32, 61, 32, 42, 118, 97, 108, 117, 101, 59, 32, 47, 47, 32, 114, 101, 109, 97, 112,
        32, 116, 104, 101, 32, 115, 99, 97, 110, 99, 111, 100, 101, 32, 105, 102, 32, 105, 116, 32,
        101, 120, 105, 115, 116, 115, 32, 105, 110, 32, 116, 104, 101, 32, 109, 97, 112, 0, 32, 32,
        32, 32, 98, 112, 102, 95, 114, 105, 110, 103, 98, 117, 102, 95, 111, 117, 116, 112, 117,
        116, 40, 38, 101, 118, 101, 110, 116, 95, 114, 98, 44, 32, 38, 101, 110, 116, 114, 121, 44,
        32, 115, 105, 122, 101, 111, 102, 40, 115, 116, 114, 117, 99, 116, 32, 101, 118, 101, 110,
        116, 95, 108, 111, 103, 95, 101, 110, 116, 114, 121, 41, 44, 32, 48, 41, 59, 0, 46, 98,
        115, 115, 0, 46, 115, 116, 114, 117, 99, 116, 95, 111, 112, 115, 46, 108, 105, 110, 107, 0,
        108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 46, 107, 115, 121, 109, 115,
        0, 115, 116, 114, 117, 99, 116, 95, 111, 112, 115, 47, 104, 105, 100, 95, 98, 112, 102, 95,
        100, 101, 118, 105, 99, 101, 95, 101, 118, 101, 110, 116, 0, 159, 235, 1, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 12, 1, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 44,
        5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 16, 0, 0, 0, 44, 5, 0, 0, 16, 0, 0, 0, 0, 0,
        0, 0, 199, 2, 0, 0, 28, 3, 0, 0, 5, 88, 0, 0, 8, 0, 0, 0, 199, 2, 0, 0, 88, 3, 0, 0, 18,
        96, 0, 0, 32, 0, 0, 0, 199, 2, 0, 0, 138, 3, 0, 0, 9, 108, 0, 0, 40, 0, 0, 0, 199, 2, 0, 0,
        153, 3, 0, 0, 9, 124, 0, 0, 48, 0, 0, 0, 199, 2, 0, 0, 153, 3, 0, 0, 17, 124, 0, 0, 56, 0,
        0, 0, 199, 2, 0, 0, 178, 3, 0, 0, 9, 136, 0, 0, 64, 0, 0, 0, 199, 2, 0, 0, 178, 3, 0, 0,
        17, 136, 0, 0, 88, 0, 0, 0, 199, 2, 0, 0, 200, 3, 0, 0, 36, 160, 0, 0, 112, 0, 0, 0, 199,
        2, 0, 0, 237, 3, 0, 0, 13, 184, 0, 0, 152, 0, 0, 0, 199, 2, 0, 0, 36, 4, 0, 0, 9, 188, 0,
        0, 160, 0, 0, 0, 199, 2, 0, 0, 51, 4, 0, 0, 21, 196, 0, 0, 176, 0, 0, 0, 199, 2, 0, 0, 79,
        4, 0, 0, 24, 200, 0, 0, 184, 0, 0, 0, 199, 2, 0, 0, 51, 4, 0, 0, 19, 196, 0, 0, 192, 0, 0,
        0, 199, 2, 0, 0, 107, 4, 0, 0, 17, 204, 0, 0, 216, 0, 0, 0, 199, 2, 0, 0, 179, 4, 0, 0, 5,
        216, 0, 0, 0, 1, 0, 0, 199, 2, 0, 0, 28, 3, 0, 0, 5, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9,
        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 1, 0, 0, 0, 0, 0,
        0, 240, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0,
        0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 2,
        0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 72, 3, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 72, 3, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 1, 0, 0, 0, 3, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 3, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 9,
        0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 0, 0, 0, 0, 48, 0,
        0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
        222, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 3, 0, 0, 0,
        0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
        0, 0, 0, 0, 0, 243, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        4, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
